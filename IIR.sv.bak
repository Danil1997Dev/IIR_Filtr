module IIR
(
  input clk,reset_l,wr_en,
  input [31:0] i_signal,data,addr,
  output [31:0] o_signal 
);

  logic en = 1;

  typedef struct packed{
    logic sign_exp; 
	 logic [7:0] expanenta;
	 logic [22:0] mantisa;
  } singal_t;
 
  logic [31:0] K [0:3];
  
  logic [1:0] i = 0;
  
  always_ff @(posedge clk or negedge reset_l)
    if (!reset_l)
	   begin
	     K[i] <= 0;
		  i++;
		end
	 else
	   begin
	     if (!wr_en)
		    begin
			   K[0:3] <= K[0:3];
			 end
		  else
		    begin 
			   K[addr[1:0]] <= data; 
			 end
		end
	 
  
  const logic [31:0] S = {1'b0,8'b1111011,23'b00000000000000000000000}; 
  const logic [31:0] A2 = {1'b1,8'b1111111,23'b11111111110111110011101}; 
  const logic [31:0] A3 = {1'b0,8'b1111110,23'b11111111101111100111010}; 
  const logic [31:0] B2 = {1'b1,8'b10000000,23'b00000000000000000000000}; 
 
  bit [31:0] mlt_s = 0;
  bit [31:0] summ_a2 = 0;
  bit [31:0] summ_a3 = 0;
  bit [31:0] sh_1 = 0; 
  bit [31:0] sh_2 = 0;
  bit [31:0] summ_b2 = 0; 
  bit [31:0] mlt_a3 = 0;
  bit [31:0] mlt_a2 = 0;
  bit [31:0] mlt_b2 = 0;
  
  FP_MULT  mult_s (.clk(clk),.areset(~reset_l),.en(en),.a(i_signal),.b(K[0]),.q(mlt_s));
  
  FP_SUB sub_a2 (.clk(clk),.areset(~reset_l),.en(en),.a(mlt_s),.b(mlt_a2),.q(summ_a2));
  
  FP_SUB sub_a3 (.clk(clk),.areset(~reset_l),.en(en),.a(summ_a2),.b(mlt_a3),.q(summ_a3));
  
  shift #(9) shift_1 (.clk(clk),.reset_l(reset_l),.en(en),.i_signal(summ_a3),.o_signal(sh_1));  
  
  FP_MULT  mult_a2 (.clk(clk),.areset(~reset_l),.en(en),.a(sh_1),.b(K[1]),.q(mlt_a2));
  
  FP_MULT  mult_b2 (.clk(clk),.areset(~reset_l),.en(en),.a(sh_1),.b(K[3]),.q(mlt_b2));
  
  shift #(9) shift_2 (.clk(clk),.reset_l(reset_l),.en(en),.i_signal(sh_1),.o_signal(sh_2));  
  
  FP_MULT  mult_a3 (.clk(clk),.areset(~reset_l),.en(en),.a(sh_2),.b(K[2]),.q(mlt_a3));
  
  FP_ADD add_b2 (.clk(clk),.areset(~reset_l),.en(en),.a(summ_a3),.b(mlt_b2),.q(summ_b2));
	
  FP_ADD add_b3 (.clk(clk),.areset(~reset_l),.en(en),.a(summ_b2),.b(sh_2),.q(o_signal)); 
   
endmodule 